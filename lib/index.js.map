{"version":3,"file":"index.js","sources":["../src/classes/ina219.ts"],"sourcesContent":["/*\r\nconst _INA219_READ = 0x01;\r\n\r\nconst INA219_I2C_ADDRESS1 = 0x40;\r\nconst INA219_I2C_ADDRESS2 = 0x41;\r\nconst INA219_I2C_ADDRESS3 = 0x44;\r\nconst INA219_I2C_ADDRESS4 = 0x45;\r\n\r\nconst INA219_CONFIG_RESET = 0x8000;\r\nconst _INA219_REG_CONFIG = 0x00;\r\n\r\nconst bus_vol_range_16V = 0;\r\nconst bus_vol_range_32V = 1;\r\n\r\nconst PGA_bits_1 = 0;\r\nconst PGA_bits_2 = 1;\r\nconst PGA_bits_4 = 2;\r\nconst PGA_bits_8 = 3;\r\n    \r\nconst adc_bits_9 = 0;\r\nconst adc_bits_10 = 1;\r\nconst adc_bits_11 = 2;\r\nconst adc_bits_12 = 3;\r\n    \r\nconst adc_sample_1 = 0;\r\nconst adc_sample_2 = 1;\r\nconst adc_sample_4 = 2;\r\nconst adc_sample_8 = 3;\r\nconst adc_sample_16 = 4;\r\nconst adc_sample_32 = 5;\r\nconst adc_sample_64 = 6;\r\nconst adc_sample_128 = 7;\r\n    \r\nconst power_down = 0;\r\nconst shunt_vol_trig = 1;\r\nconst bus_vol_trig = 2;\r\nconst shunt_and_bus_vol_trig = 3;\r\nconst adc_off = 4;\r\nconst shunt_vol_con = 5;\r\nconst bus_vol_con = 6;\r\nconst shunt_and_bus_vol_con = 7;\r\n\r\nconst _INA219_REG_SHUNTVOLTAGE = 0x01;\r\n\r\nconst _INA219_REG_BUSVOLTAGE = 0x02;\r\n\r\nconst _INA219_REG_POWER = 0x03;\r\n\r\nconst _INA219_REG_CURRENT = 0x04;\r\n\r\nconst _INA219_REG_CALIBRATION = 0x05;\r\n*/\r\n\r\n// const begin = (self) => {\r\n//   if (!self.scan()) return false;\r\n        \r\n//   self.cal_value = 4096;\r\n//   self.set_bus_RNG(self.bus_vol_range_32V);\r\n//   self.set_PGA(self.PGA_bits_8);\r\n//   self.set_bus_ADC(self.adc_bits_12, self.adc_sample_8);\r\n//   self.set_shunt_ADC(self.adc_bits_12, self.adc_sample_8);\r\n//   self.set_mode(self.shunt_and_bus_vol_con);\r\n//   return true;\r\n// }\r\n\r\n// const linear_cal = (self, ina219_reading_mA, ext_meter_reading_mA) => {\r\n//   ina219_reading_mA = float(ina219_reading_mA);\r\n//   ext_meter_reading_mA = float(ext_meter_reading_mA);\r\n//   self.cal_value = int((ext_meter_reading_mA / ina219_reading_mA) * self.cal_value) & 0xFFFE;\r\n//   self._write_register(self._INA219_REG_CALIBRATION, self.cal_value);\r\n// }\r\n\r\n//   def reset(self):\r\n//         self._write_register(self._INA219_REG_CONFIG, self._INA219_CONFIG_RESET)\r\n\r\n//     def _write_register(self, register, value):\r\n//         self.i2cbus.write_i2c_block_data(self.i2c_addr, register, [value >> 8, value & 0xff])\r\n\r\n//     def _read_register(self, register):\r\n//         return self.i2cbus.read_i2c_block_data(self.i2c_addr, register) \r\n\r\n//     def get_bus_voltage_V(self):\r\n//         return float(self.read_ina_reg(self._INA219_REG_BUSVOLTAGE) >> 1) * 0.001\r\n\r\n//     def get_shunt_voltage_mV(self):\r\n//         return float(self.read_ina_reg(self._INA219_REG_SHUNTVOLTAGE))\r\n\r\n//     def get_current_mA(self):\r\n//         return float(self.read_ina_reg(self._INA219_REG_CURRENT))\r\n\r\n//     def get_power_mW(self):\r\n//         return float(self.read_ina_reg(self._INA219_REG_POWER)) * 20\r\n\r\n//     def set_bus_RNG(self, value):\r\n//         conf = 0\r\n//         conf = self.read_ina_reg(self._INA219_REG_CONFIG)\r\n//         conf &= ~(0x01 << 13)\r\n//         conf |= value << 13\r\n//         self._write_register(self._INA219_REG_CONFIG, conf)\r\n\r\n//     def set_PGA(self, bits):\r\n//         conf = 0\r\n//         conf = self.read_ina_reg(self._INA219_REG_CONFIG)\r\n//         conf &= ~(0x03 << 11)\r\n//         conf |= bits << 11\r\n//         self._write_register(self._INA219_REG_CONFIG, conf)\r\n    \r\n//     def set_bus_ADC(self, bits, sample):\r\n//         conf = 0\r\n//         value = 0\r\n//         if(bits < adc_bits_12 and sample > adc_sample_1):\r\n//             return\r\n//         if(bits < adc_bits_12):\r\n//             value = bits\r\n//         else:\r\n//             value = 0x80 | sample\r\n//         conf = self.read_ina_reg(self._INA219_REG_CONFIG)\r\n//         conf &= ~(0x0f << 7)\r\n//         conf |= value << 7\r\n//         self._write_register(self._INA219_REG_CONFIG, conf)\r\n    \r\n//     def set_shunt_ADC(self, bits, sample):\r\n//         conf = 0\r\n//         value = 0\r\n//         if(bits < adc_bits_12 and sample > adc_sample_1):\r\n//             return\r\n//         if(bits < adc_bits_12):\r\n//             value = bits\r\n//         else:\r\n//             value = 0x80 | sample\r\n//         conf = self.read_ina_reg(self._INA219_REG_CONFIG)\r\n//         conf &= ~(0x0f << 3)\r\n//         conf |= value << 3\r\n//         self._write_register(self._INA219_REG_CONFIG, conf)\r\n    \r\n//     def set_mode(self, mode):\r\n//         conf = 0\r\n//         conf = self.read_ina_reg(self._INA219_REG_CONFIG)\r\n//         conf &= ~0x07\r\n//         conf |= mode\r\n//         self._write_register(self._INA219_REG_CONFIG, conf)\r\n\r\n//     def read_ina_reg(self, reg):\r\n//         buf = []\r\n//         buf = self._read_register(reg)\r\n//         if (buf[0] & 0x80):\r\n//             return - 0x10000 + ((buf[0] << 8) | (buf[1]))\r\n//         else:\r\n//             return (buf[0] << 8) | (buf[1])\r\n\r\n//     def scan(self):\r\n//         try:\r\n//             self.i2cbus.read_byte(self.i2c_addr)\r\n//             return True\r\n//         except:\r\n//             print(\"I2C init fail\")\r\n//             return False\r\n\r\nexport class Ina219 {\r\n\r\n  /**\r\n   * Initialise the i2c\r\n   * @param bus \r\n   * @param addr \r\n   */\r\n  // private __init__ = (bus, addr) => {\r\n  //   self.i2cbus=smbus.SMBus(bus)\r\n  //   self.i2c_addr = addr\r\n  // }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEA;KAWC;IAAD,aAAC;AAAD,CAAC;;;;"}